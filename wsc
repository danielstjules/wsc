#!/usr/bin/env node
const WebSocket = require('ws');
const parser    = require('meow');
const chalk     = require('chalk');
const readline  = require('readline');

const cli = parser(`
  Usage
    $ wsc [options] ws://echo.websocket.org

  Options
    -e, --eval            Evaluate input as JS and encode as JSON
    -r, --roundtrip       Track roundtrip time between sent/recv
    -t, --time            Print a timestamp in ms before each line
    -p, --protocol <str>  Set protocol
    -d, --decode <str>    Decode binary responses using encoding specified by str
    -M                    Disable masking
    -C                    Disable color output
`, {
  boolean: ['e', 'r', 't', 'M', 'C'],
  string: ['p', 'd'],
  alias: {
    e: 'eval',
    r: 'roundtrip',
    t: 'time',
    p: 'protocol',
    d: 'decode'
  }
});

const supported_encodings =
      ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'hex'];

if (!cli.input.length) {
  console.error('Missing url');
  process.exit(1);
}

if (cli.flags.decode && !supported_encodings.includes(cli.flags.decode)) {
  console.error(`Decode encoding must be one of: ${supported_encodings}`);
  process.exit(1);
}

chalk.enabled = !cli.flags.C;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
}).on('SIGINT', () => {
  console.log();
  process.exit();
});

const url = cli.input[0];
const ws = new WebSocket(url, cli.flags.protocol);

ws.on('open', () => {
  var sent = Date.now();

  console.log(chalk.green(`Connected to ${url}`));
  rl.prompt();

  ws.on('error', (err) => {
    console.error(`Connection error: ${err}`);
    process.exit(1);
  }).on('close', () => {
    console.log('Connection closed');
    process.exit(0);
  }).on('message', (message, flags) => {
    var output = '';
    var recv = Date.now();
    if (cli.flags.time) {
      output += `${recv} `;
    }

    if (flags.binary) {
      if (cli.flags.decode) {
        decoded = Buffer.from(message, cli.flags.decode);
        output += `< ${decoded}`;
      } else {
        output += '< Binary data received';
      }
    } else {
      output += `< ${message}`;
    }

    if (cli.flags.roundtrip) {
      output += ` (${recv - sent}ms)`;
    }

    clear();
    console.log(chalk.gray(output));
    rl.prompt();
  });

  rl.on('line', (input) => {
    const message = cli.flags.eval ? tryEval(input) : input;

    sent = Date.now();
    if (cli.flags.time) {
      clearPrev();
      console.log(`${sent} > ${input}`);
      rl.prompt();
    }

    ws.send(message, {mask: !cli.flags.M});
    rl.prompt();
  });
});

function clear() {
  readline.clearLine(process.stdout, 0);
  readline.cursorTo(process.stdout, 0);
}

function clearPrev() {
  readline.moveCursor(process.stdout, 0, -1);
  clear();
}

function tryEval(str) {
  try {
    return JSON.stringify(eval(`(${str})`));
  } catch (e) {
    return str;
  }
}
